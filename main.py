from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import os

# –°—Ç–∞–¥—ñ—ó —Ç–µ—Å—Ç—É
QUESTION1, QUESTION2, QUESTION3, QUESTION4, QUESTION5 = range(5)

# –ü–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
questions_text = {
    QUESTION1: "–©–æ —Ç–æ–±—ñ –±—ñ–ª—å—à–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è?",
    QUESTION2: "–Ø–∫–∏–π –ø—Ä–æ—î–∫—Ç —Ç–∏ –± —Ö–æ—Ç—ñ–≤ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏?",
    QUESTION3: "–Ø–∫ —Ç–æ–±—ñ –∑—Ä—É—á–Ω—ñ—à–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏?",
    QUESTION4: "–Ø–∫—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —Ç–æ–±—ñ —Ü—ñ–∫–∞–≤—ñ—à–µ –≤–∏–≤—á–∞—Ç–∏?",
    QUESTION5: "–Ø–∫—É —Å—É–ø–µ—Ä—Å–∏–ª—É —Ç–∏ –± –≤–∏–±—Ä–∞–≤?"
}

keyboards = {
    QUESTION1: [["–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "–ö—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞"], ["–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö", "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ"]],
    QUESTION2: [["–ú–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫", "–°–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–∏—Å—Ç—É –¥–∞–Ω–∏—Ö"], ["–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞", "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –º–µ—Ä–µ–∂–∞"]],
    QUESTION3: [["–ö–æ–º–∞–Ω–¥–Ω–∞ —Ä–æ–±–æ—Ç–∞", "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"]],
    QUESTION4: [["–ê–ª–≥–æ—Ä–∏—Ç–º–∏", "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—è"], ["–ú–µ—Ä–µ–∂—ñ", "–ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è"]],
    QUESTION5: [["–°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏", "–ó–∞—Ö–∏—â–∞—Ç–∏ –¥–∞–Ω—ñ"], ["–ö–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω–∏–º–∏", "–ë—É–¥—É–≤–∞—Ç–∏ –º–µ—Ä–µ–∂—ñ"]]
}

# –ü—Ä–æ—Ñ—ñ–ª—ñ
profiles = ["–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "–ö—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞", "–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö", "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ"]

# –ü–∞–º'—è—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data[chat_id] = {profile: 0 for profile in profiles}
    
    context.user_data['state'] = QUESTION1

    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç! üëã –î–∞–≤–∞–π –≤–∏–∑–Ω–∞—á–∏–º–æ, —Ö—Ç–æ —Ç–∏ –≤ –Ü–¢! üöÄ\n\n{questions_text[QUESTION1]}",
        reply_markup=ReplyKeyboardMarkup(keyboards[QUESTION1], one_time_keyboard=True, resize_keyboard=True)
    )
    return QUESTION1

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text

    for profile in profiles:
        if profile.lower() in text.lower():
            user_data[chat_id][profile] += 1

    current_state = context.user_data.get('state', QUESTION1)
    next_state = current_state + 1

    if next_state <= QUESTION5:
        await update.message.reply_text(
            questions_text[next_state],
            reply_markup=ReplyKeyboardMarkup(keyboards[next_state], one_time_keyboard=True, resize_keyboard=True)
        )
        context.user_data['state'] = next_state
        return next_state
    else:
        top_profile = max(user_data[chat_id], key=user_data[chat_id].get)
        role = {
            "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è": "Software Engineer",
            "–ö—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∞": "–§–∞—Ö—ñ–≤–µ—Ü—å –∑ –∫—ñ–±–µ—Ä–±–µ–∑–ø–µ–∫–∏",
            "–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö": "Data Scientist",
            "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ": "Network Engineer"
        }[top_profile]

        await update.message.reply_text(
            f"–í—ñ—Ç–∞—î–º–æ! üéâ –¢–∏ ‚Äî –º–∞–π–±—É—Ç–Ω—ñ–π {role}!\n\n–ë—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç—É—Ç üëâ https://fcst.nau.edu.ua/1st-course/",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–¢–µ—Å—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    token = os.environ.get("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION4: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION5: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ webhook –¥–ª—è Render
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get('PORT', 8443)),
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{token}"
    )

if __name__ == '__main__':
    main()
