from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import os

# –°—Ç–∞–¥—ñ—ó —Ç–µ—Å—Ç—É
QUESTION1, QUESTION2, QUESTION3, QUESTION4, QUESTION5 = range(5)

# –û–Ω–æ–≤–ª–µ–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
questions_text = {
    QUESTION1: "–©–æ —Ç–µ–±–µ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞—Ö–æ–ø–ª—é—î —É —Å–≤—ñ—Ç—ñ –Ü–¢?",
    QUESTION2: "–Ø–∫–∏–π –ø—Ä–æ—î–∫—Ç —Ç–∏ –º—Ä—ñ—î—à —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏?",
    QUESTION3: "–Ø–∫ —Ç–æ–±—ñ –∑—Ä—É—á–Ω—ñ—à–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ?",
    QUESTION4: "–Ø–∫–∏–π —Ç–∏–ø –∑–∞–≤–¥–∞–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —Ç–æ–±—ñ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è?",
    QUESTION5: "–Ø–∫–æ—é —Å—É–ø–µ—Ä—Å–∏–ª–æ—é —Ç–∏ –± —Ö–æ—Ç—ñ–≤ –≤–æ–ª–æ–¥—ñ—Ç–∏ –≤ –Ü–¢?"
}

# –û–Ω–æ–≤–ª–µ–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
keyboards = {
    QUESTION1: [["–ü–∏—Å–∞—Ç–∏ –∫–æ–¥", "–ó–∞—Ö–∏—â–∞—Ç–∏ –¥–∞–Ω—ñ"], ["–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", "–ë—É–¥—É–≤–∞—Ç–∏ –º–µ—Ä–µ–∂—ñ"]],
    QUESTION2: [["–†–æ–∑—Ä–æ–±–∏—Ç–∏ –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫", "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É –∑–∞—Ö–∏—Å—Ç—É"], ["–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É", "–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—É –º–µ—Ä–µ–∂—É"], ["–û–±—Ä–æ–±–ª—è—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "–†–æ–∑—Ä–æ–±–∏—Ç–∏ –≤–±—É–¥–æ–≤–∞–Ω—É —Å–∏—Å—Ç–µ–º—É"], ["–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∏"]],
    QUESTION3: [["–°–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ", "–ü—Ä–∞—Ü—é–≤–∞—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ"]],
    QUESTION4: [["–°—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö —ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏", "–ö—ñ–±–µ—Ä–∑–∞—Ö–∏—Å—Ç —ñ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—è"], ["–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –º–µ—Ä–µ–∂", "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç —ñ –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è"], ["–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä", "–í–±—É–¥–æ–≤–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏"]],
    QUESTION5: [["–°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏", "–ó—É–ø–∏–Ω—è—Ç–∏ –∫—ñ–±–µ—Ä–∞—Ç–∞–∫–∏"], ["–í—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç—ñ –≤ –¥–∞–Ω–∏—Ö", "–°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –º–µ—Ä–µ–∂–µ–≤—É —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É"], ["–û–±—Ä–æ–±–ª—è—Ç–∏ –≤—ñ–¥–µ–æ- —Ç–∞ —Ñ–æ—Ç–æ–¥–∞–Ω—ñ", "–ü—Ä–æ—î–∫—Ç—É–≤–∞—Ç–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó"], ["–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∏"]]
}

# –ü—Ä–æ—Ñ—ñ–ª—ñ
profiles = [
    "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
    "–ó–∞—Ö–∏—Å—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó",
    "–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö",
    "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ",
    "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä",
    "–í–±—É–¥–æ–≤–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏",
    "–°–∏—Å—Ç–µ–º–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è"
]

# –ü–∞–º'—è—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data[chat_id] = {profile: 0 for profile in profiles}
    
    context.user_data['state'] = QUESTION1

    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç! üëã –î–∞–≤–∞–π –≤–∏–∑–Ω–∞—á–∏–º–æ, —Ö—Ç–æ —Ç–∏ –≤ –Ü–¢! üöÄ\n\n{questions_text[QUESTION1]}",
        reply_markup=ReplyKeyboardMarkup(keyboards[QUESTION1], one_time_keyboard=True, resize_keyboard=True)
    )
    return QUESTION1

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.lower()

    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–ª—ñ–≤
    if any(kw in text for kw in ["–∫–æ–¥", "–º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö", "—ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏"]):
        user_data[chat_id]["–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"] += 1
    if any(kw in text for kw in ["–∑–∞—Ö–∏—Å—Ç", "–∫—ñ–±–µ—Ä–∞—Ç–∞–∫–∏", "–∫—ñ–±–µ—Ä–∑–∞—Ö–∏—Å—Ç", "—Å–∏—Å—Ç–µ–º–∞ –∑–∞—Ö–∏—Å—Ç—É"]):
        user_data[chat_id]["–ó–∞—Ö–∏—Å—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"] += 1
    if any(kw in text for kw in ["–∞–Ω–∞–ª—ñ–∑", "–∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è", "–¥–∞–Ω—ñ"]):
        user_data[chat_id]["–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö"] += 1
    if any(kw in text for kw in ["–º–µ—Ä–µ–∂–∞", "—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç", "–º–µ—Ä–µ–∂–µ–≤–∞ —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –º–µ—Ä–µ–∂"]):
        user_data[chat_id]["–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ"] += 1
    if any(kw in text for kw in ["–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "–∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä", "–≤—ñ–¥–µ–æ", "—Ñ–æ—Ç–æ"]):
        user_data[chat_id]["–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä"] += 1
    if any(kw in text for kw in ["–≤–±—É–¥–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞", "–≤–±—É–¥–æ–≤–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏", "–µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó"]):
        user_data[chat_id]["–í–±—É–¥–æ–≤–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏"] += 1
    if any(kw in text for kw in ["—Å–µ—Ä–≤–µ—Ä–∏", "–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞—Ç–∏", "—Å–∏—Å—Ç–µ–º–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"]):
        user_data[chat_id]["–°–∏—Å—Ç–µ–º–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è"] += 1

    current_state = context.user_data.get('state', QUESTION1)
    next_state = current_state + 1

    if next_state <= QUESTION5:
        await update.message.reply_text(
            questions_text[next_state],
            reply_markup=ReplyKeyboardMarkup(keyboards[next_state], one_time_keyboard=True, resize_keyboard=True)
        )
        context.user_data['state'] = next_state
        return next_state
    else:
        top_profile = max(user_data[chat_id], key=user_data[chat_id].get)
        role = {
            "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è": "Software Engineer",
            "–ó–∞—Ö–∏—Å—Ç —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó": "Information Security Specialist",
            "–ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö": "Data Scientist",
            "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –º–µ—Ä–µ–∂—ñ": "Network Engineer",
            "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä": "Computer Vision Engineer",
            "–í–±—É–¥–æ–≤–∞–Ω—ñ —Å–∏—Å—Ç–µ–º–∏": "Embedded Systems Engineer",
            "–°–∏—Å—Ç–µ–º–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è": "System Administrator"
        }[top_profile]

        await update.message.reply_text(
            f"–í—ñ—Ç–∞—î–º–æ! üéâ –¢–∏ ‚Äî –º–∞–π–±—É—Ç–Ω—ñ–π {role}!\n\n–ë—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç—É—Ç üëâ https://fcst.nau.edu.ua/1st-course/",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–¢–µ—Å—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    token = os.environ.get("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            QUESTION1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION3: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION4: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
            QUESTION5: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_question)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conv_handler)

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get('PORT', 8443)),
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}"
    )

if __name__ == '__main__':
    main()
